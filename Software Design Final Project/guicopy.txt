import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.scene.text.Text; // Import Text class
import javafx.stage.Stage;
import javafx.scene.control.TextArea;

public class GUI extends Application {

    Stage window;
    Scene decryptionScene, encryptionScene;
    private Text resultText; // Text control to display the 
    TextArea textArea = new TextArea();

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        window = primaryStage;
        
        //Window
        Button decryptionButton = new Button("Decryption");
        Button encryptionButton = new Button("Encryption");
        decryptionButton.setOnAction(e -> window.setScene(decryptionScene));
        encryptionButton.setOnAction(e -> window.setScene(encryptionScene));

        //Decryption
        Button decryptButton = new Button("Decrypt");
        Button viewEncryptedButton = new Button("View encrypted text");
        Button viewBookButton = new Button("View book");
        decryptButton.setOnAction(e -> displayDecryptionResult());

        //encryption
        Button encryptButton = new Button("Encrypt");
        Button viewPlainButton = new Button("View plain text");
        //also use viewBookButton
        encryptButton.setOnAction(e -> displayEncryptionResult());



        StackPane root = new StackPane();
        StackPane.setAlignment(decryptButton, Pos.CENTER_LEFT);
        StackPane.setAlignment(encryptButton, Pos.CENTER_RIGHT);
        
        resultText = new Text(); // Create a Text control
        root.getChildren().addAll(decryptButton, encryptButton, resultText);
       
        window.setTitle("Book Cipher");
        window.setScene(new Scene(root, 400, 250));
        window.show();
    }

    private void displayFileContents(String filePath) {
        // Read file contents and display in the TextArea
        try {
            String fileContents = new String(Files.readAllBytes(Paths.get(filePath)));
            textArea.setText(fileContents);
        } catch (IOException e) {
            e.printStackTrace();
            textArea.setText("Error reading file: " + e.getMessage());
        }
    }

    private void displayDecryptionResult() {
        // Perform decryption in a separate thread or background task
        new Thread(() -> {
            String decryptionResult = Main.decrypt("encrypted.txt", "book.txt");

            // Update the GUI with the result using Platform.runLater
            javafx.application.Platform.runLater(() -> {
                resultText.setText(decryptionResult);
            });
        }).start();
    }

    private void displayEncryptionResult() {
        // Perform encryption in a separate thread or background task
        new Thread(() -> {
            String encryptionResult = Main.encrypt("plain.txt", "book.txt");

            // Update the GUI with the result using Platform.runLater
            javafx.application.Platform.runLater(() -> {
                resultText.setText(encryptionResult);
            });
        }).start();
    }
}